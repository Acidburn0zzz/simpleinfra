#!/usr/bin/env python3
import subprocess
import pathlib
import sys
import shutil
import tempfile
import argparse
import os

BASE_PATH = pathlib.Path(__file__).resolve().parent
VENV_PATH = BASE_PATH / ".venv"
OP_DOWNLOAD_URL = "https://app-updates.agilebits.com/product_history/CLI"

# Ansible changes a lot between releases and deprecates a lot of stuff each of
# them. Using a pinned ansible identical between all team members should
# reduce the churn.
def install_ansible():
    requirements = BASE_PATH / "requirements.txt"
    venv_requirements = VENV_PATH / "installed-requirements.txt"

    # Avoid installing ansible in the virtualenv multiple times
    if venv_requirements.exists() and \
       venv_requirements.read_bytes() == requirements.read_bytes():
        return

    print("creating a new virtual environment and install ansible in it...")
    shutil.rmtree(VENV_PATH, ignore_errors=True)
    subprocess.run([sys.executable, "-m", "venv", str(VENV_PATH)], check=True)
    subprocess.run([
        str(VENV_PATH / "bin" / "pip"), "install", "-r", str(requirements),
    ], check=True)
    shutil.copy(str(requirements), str(venv_requirements))

def run_playbook(args):
    env_dir = BASE_PATH / "envs" / args.env
    tempdir = pathlib.Path(tempfile.mkdtemp())
    try:
        # Create a temporary directory merging together the chosen
        # environment, the chosen playbook and the shared files.
        (tempdir / "play").mkdir()
        (tempdir / "play" / "roles").symlink_to(BASE_PATH / "roles")
        (tempdir / "play" / "group_vars").symlink_to(BASE_PATH / "group_vars")
        (tempdir / "play" / "playbook.yml").symlink_to(
            BASE_PATH / "playbooks" / (args.playbook + ".yml")
        )
        (tempdir / "env").symlink_to(env_dir)
        (tempdir / "ansible.cfg").symlink_to(BASE_PATH / "ansible.cfg")

        # Try to load 1password credentials
        env = dict(os.environ)
        if (env_dir / "1password-subdomain").exists():
            if shutil.which("op") is None:
                print("this environment requires 1password, but `op` is missing")
                print("download it here:", OP_DOWNLOAD_URL)
                exit(1)
            subdomain = (env_dir / "1password-subdomain").read_text().strip()
            var = f"OP_SESSION_{subdomain}"
            if var in os.environ:
                print("found an existing 1password session, reusing it")
            else:
                print("this environment requires a 1password session, asking to log in...")
                res = subprocess.run(
                    ["op", "signin", subdomain, "--output=raw"],
                    stdout=subprocess.PIPE, check=True,
                )
                env[var] = res.stdout.strip()

        # Finally invoke the ansible binary installed in the virtualenv
        ansible_args = [
            str(VENV_PATH / "bin" / "ansible-playbook"),
            "-i", str(tempdir / "env" / "hosts"),
            str(tempdir / "play" / "playbook.yml"),
        ]
        if args.user is not None:
            ansible_args += ["-u", args.user]
        res = subprocess.run(ansible_args, cwd=str(tempdir), env=env)
        if res.returncode != 0:
            exit(1)
    finally:
        shutil.rmtree(str(tempdir), ignore_errors=True)

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("env")
    parser.add_argument("playbook")
    parser.add_argument(
        "-u", "--user", help="user to log into instances as", default=None,
    )
    args = parser.parse_args()

    install_ansible()
    run_playbook(args)
